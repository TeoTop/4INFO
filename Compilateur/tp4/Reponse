(B)  Bloc -> "begin" Sdecl ";" Sinst "end"
(Sd) Sdecl -> Decl | Decl "," Sdecl
(D)  Decl -> Type Ident
(T)  Type -> "int" | "bool"
(Si) Sinst -> Inst | Inst ";" Sinst
(I)  Inst -> Bloc | ident "<-" Expr
(E)  Expr -> Expr "+" Expr | Expr "<" Expr | Expr "and" Expr | "(" Expr ")" | ident

Fermeture :

Fermeture(I) = 
	[I -> .ident "<-" E]

Fermeture(E) = 
	[E -> .E "+" E]
	[E -> .E "<" E]
	[E -> .E "and" E]
	[E -> ."(" E ")"]
	[E -> .ident]


Transition : 

	I0 = { Fermeture(I) }

=====================================

	I1 = Tr(I0, ident) -> { [I -> ident . "<-" E] }

==============================================

	I2 = Tr(I1, "<-") -> { [I -> ident "<-" . E], 
							Fermeture(E) }

==============================================

	I3 = Tr(I2, E) -> { [I -> ident "<-" E .],  
						[E -> E . "+" E],
						[E -> E . "<" E], 
						[E -> E . "and" E] }

	I4 = Tr(I2, "(") -> { [E -> "(" . E ")"],
							Fermeture(E) }

	I5 = Tr(I2, ident) -> { [E -> ident .] }

=============================================  

	I6 = Tr(I3, "+") -> { [E -> E "+" . E], Fermeture(E) }

	I7 = Tr(I3, "<") -> { [E -> E "<" . E,] Fermeture(E) }

	I8 = Tr(I3, "and") -> { [E -> E "and" . E], Fermeture(E) }

	I9 = Tr(I4, E) -> { E -> "(" E . ")" }

==============================================

	I10 = Tr(I6, E) -> { [E -> E "+" E .],  
						 [E -> E . "+" E],
						 [E -> E . "<" E], 
						 [E -> E . "and" E] }

	I11 = Tr(I7, E) -> { [E -> E "<" E .],  
						 [E -> E . "+" E],
						 [E -> E . "<" E], 
						 [E -> E . "and" E] }

	I12 = Tr(I8, E) -> { [E -> E "and" E .],  
						 [E -> E . "+" E],
						 [E -> E . "<" E], 
						 [E -> E . "and" E] }

	I13 = Tr(I9, ")") -> { E -> "(" E ")" . }

=================================================


Dans les trois cas de conflit qui suis, le parser de sais pas si il doit faire une rédution ou passé à la suite.

Dans ce premier cas, le parser est bloqué par la règle 7. Il ne sait pas qi il doit réduire après avoir lu expr ou si il doit continuer à lire la régle du PLUS, du AND ou du INF, respectivement 7,5 et 6. Cela est du à un probleme de priorite entre le terminaux. En effet, si PLUS est prioritaire, alors se serait la reduction qui sera préférer à la consomation des règles 5 et 6. Inversement, ce sera la consomation de la règle 7 qui sera préférer à la réduction si l'on se trouve à la fin des règles 5 et 6. 

16: shift/reduce conflict (shift 12, reduce 7) on PLUS
16: shift/reduce conflict (shift 13, reduce 7) on INF
16: shift/reduce conflict (shift 14, reduce 7) on AND
state 16
	expr : expr . AND expr  (5)
	expr : expr . INF expr  (6)
	expr : expr . PLUS expr  (7)
	expr : expr PLUS expr .  (7)

	PLUS  shift 12
	INF  shift 13
	AND  shift 14
	PARFERM  reduce 7
	EOL  reduce 7

Ce cas est identique au premier, sauf qu'il s'applique à la règle 6 de la grammaire.
17: shift/reduce conflict (shift 12, reduce 6) on PLUS
17: shift/reduce conflict (shift 13, reduce 6) on INF
17: shift/reduce conflict (shift 14, reduce 6) on AND
state 17
	expr : expr . AND expr  (5)
	expr : expr . INF expr  (6)
	expr : expr INF expr .  (6)
	expr : expr . PLUS expr  (7)

	PLUS  shift 12
	INF  shift 13
	AND  shift 14
	PARFERM  reduce 6
	EOL  reduce 6


Ce cas est identique au premier, sauf qu'il s'applique à la règle 5 de la grammaire.
18: shift/reduce conflict (shift 12, reduce 5) on PLUS
18: shift/reduce conflict (shift 13, reduce 5) on INF
18: shift/reduce conflict (shift 14, reduce 5) on AND
state 18
	expr : expr . AND expr  (5)
	expr : expr AND expr .  (5)
	expr : expr . INF expr  (6)
	expr : expr . PLUS expr  (7)

	PLUS  shift 12
	INF  shift 13
	AND  shift 14
	PARFERM  reduce 5
	EOL  reduce 5


State 16 contains 3 shift/reduce conflicts.
State 17 contains 3 shift/reduce conflicts.
State 18 contains 3 shift/reduce conflicts.

Pour régler tous ces conflits, il suffit d'établir une priorité entre les terminaux PLUS, AND et INF. Dans notre cas, nous allons donnée la priorité au PLUS puis à INF et enfin à AND. 


